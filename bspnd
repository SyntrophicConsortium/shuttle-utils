#! /bin/bash

# bspnd - Battery Status Push Notifier daemon
# 	By Andy Forceno <andy@aurorabox.tech>
# 

# Usage:
# 	./bspnd > /dev/null 2>&1 &
# Will run bspnd in the background while suppressing output
#

# TODO: Eventually move user-defined vars to sguttle-utils.conf
# Device to send pushes to (can be "all")
device="phone"

# I keep this at an amount that I consider safe (ymmv) 
# Large intervals could cause you to get one (or no) notification before your battery dies
interval="7m"

# Battery percentage when we should send a low battery notification
warn_level="25"

is_full=0

# Initial percentage used to determine if battery is charging or discharging
prev_percent=$(acpi | awk '{ gsub(/[^ 0-9]/, ""); print $2 }')

hostname=$(hostname)
echo -e "\nChecking battery status in $interval intervals...\n"

while true; do
	percent=$(acpi | awk '{ gsub(/[^ 0-9]/, ""); print $2 }') 	
# Warn user to plug into power source if remaining capacity is below user-defined threshold
# and if the battery level is decreasing
	if [ "$percent" -le "$warn_level" ] && [ "$prev_percent" -gt "$percent" ]; then
		shuttle_path/shuttle -p -n "$device" "$hostname: Plug in now" "Battery is at $percent percent"
	fi		
# If battery is fully charged and we haven't notified user yet
	if [ "$percent" -eq "100" ] && [ "$is_full" -eq "0" ]; then
		shuttle_path/shuttle -p -n "$device" "$hostname: Battery charged" "Battery is at $percent percent"
		is_full=1
	fi
# If percentage < 100, the battery isn't full so,
# set a flag so future iterations know it's not full
	if [ "$percent" -lt "100" ]; then
		is_full=0
	fi
	
	sleep "$interval"
# Save percentage from last iteration
# so we can determine if charge is increasing or decreasing
	prev_percent=$percent
done
